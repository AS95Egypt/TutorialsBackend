Naming Convensions (use descriptive names)
  - Folders:  	lowercase separted by -	ex: cost-centers

  - Fields     	lowercase separated by _		no prefix

  - Tables (Collections)  CamelCase separated by _

  - Model Name(classname): Camel case	مفرد

  - Constants	upper case with underscore _

  - routes, services, validators, models (filenames)  lowercase   items-categories.router.js

  - methods, parameters		sectionId, getMaxValue

  - URL		/deliveries/:id/confirm-pickup	 how to write 2 words or more in url.

==== TIPS
- use await 	search for (.find, .repo, .countDocuments, .create)
- use blue comments before each section
- list all in page header
- don't use database models inside services only in repo
- arrange requires 
- write organized comments with steps in business 1)..., 2)..., 3)...
- apply SOLID
- make code resuable
- don't nest conditions , but use returns.
- use return with the response , and next()
- always set defaults 		    const pageIndex = parseInt(req.query.page) || 1;
- always remove not used requires   how to find out in all files ???
- apply validation in both (mongodb model, code using express-validator)

	https://mongoosejs.com/docs/validation.html
	https://express-validator.github.io/docs/api/validation-chain/

- import what you want only 		module.exports.StatusCodes = StatusCodes;			// avoid this set the object direct to the export
					const { StatusCodes } = require("../utils/constants");
- [Mongo] use lean to minize response  (get requests)
- [Mongo] forigen key fields should be indexes.
- [Mongo] use Transactions for more than one operation.
- [Mongo] make readonly fields immutable, can't edit it later.
- return next(), and return response.
- don't set req.body value to mongodb model (because this will be added as fields)
- document API using postman & export and add to svn.
- use version in API						***
- send right http method & meaningful messages.
- app.options('*', cors());					
  const hpp = require('hpp');
- limit the uploaded file size
- don't do 	checkId.custom(...)
- chain the routes
- make the name of the import the same as export name
- handle non-exist routes 					
- app.disable("x-powered-by")	// hide backend technonolgy	or app.use(helmet.hidePoweredBy());
- مطابقة الحقول فى ملف التصميم مع المكتوب فى تحليل المتطلبات
- apply validations which requires database queries only in validator for faster responses.
- use .bail() in express-validator chain to stop calling .custom() , and any step in validation, to avoid database or external api calls.
- run scripts for fixed documents on database when deployment. -> https://chat.openai.com/c/26545650-b96f-461a-8f78-a2e3b19fb1bb

- Security & protection
- sanitzation as validation
- Cache
- TESTs
=========== Suggessions
-- create constants file called `collections_names` has an object


const ECRCollections = {		// create one for each module
  Users: "Users",
  Categories: "Categories",
.
.
.
};



--- move this to constants file
    const myCustomLabels = {
      docs: "data",
    };

const categories = await categoryModel.paginate({}, {., ., customLabels: myCustomLabels});

--- separate validations methods in utils
ex: Updatcategory	in categories_services
checkItemExisted

--- use regions to arrange service functions 
//#region - get category at level() 
//#endregion					// install better comments extension to distingish comments //(*, !, ?, TODO, @param)
get category at level() 

--- create local functions in auth middleware like: 
isTokenValid(authorization)		// handels if authorization is empty or not valid 
isLoggedUserMerchant			// which is a middleware passed only to statistics route.
signToken()


====== Tools & Packages
*** update dependancies regularly


--- ESlint, Prettier 		to enforce code standards and styles.
--- joi or express-validator	to validate and sanitize input
--- passport 			for auth
--- winston or morgan		logging
--- Mocha or Jest		testing
--- JSDoc			documentation
--- cross-env ?
--- general errorhandler	???
--- express-rate-limiter	https://www.npmjs.com/package/express-rate-limit
				to prevent DOS denial of service arises from excessive requests by attackers  
				https://express-validator.github.io/docs/

=========== Naming 

1- Model names CammelCase
	const CategoryModel = require("./../models/category_model");

2- Service methods
	createCategory			// add new category
	categoryInfo			// get one category 
	categoryChildren		// get category children
	updatCategory			// update category
	getAllCategories		// get all categories 
	deleteCategory			// delete category
	
3- messages 

4- models names
	مفرد		filename:	entityname_model,	classname: EntityNameSchema
5- routes names 
	جمع 		filename:	entityname_router,	classname: EntityNameRouter
6- services names
	جمع 		filename:	entityname_service,	classname: EntityNameService
7- Constants 
	capital letters with _ underscore 

consider this:
orders.services.js
orders.routes.js


--- Paramter name 	sectionId		cammel case

============ Readability
--- arrange requires 
  // Packages
  const jwt = require("jsonwebtoken");
  // Models
  const categoryModel = require("./../models/category_model");
  const ItemModel = require("./../models/item_model");
  // Utils
  const constants = require("./../utils/constants");


--- Use descriptive variable names.
--- Use meaningful comments & documentation.
--- Break up long blocks of code into smaller.
--- Use a linter	ex: ESlint
--- Single Responsibility Principle (SRP): Each module, class, or function should have a single responsibility.
--- format code, use indentation for readability
--- Extract reusable code into separate modules
--- always use try-catch blocks to handle errors
--- use middleware effectively for (logging, authentication, or validation).
--- don't nest conditions , but use returns.
--- set naming convension
============ Standards			TODO: categorize them and add more
--- avoid if else, use one if 
    if (category) {
      res.status(200).json({
        success: true,
        message: "Category fetched successfully",
        data: category,
      });

      return;
    } else {
      res.status(200).json({
        success: false,
        message: "Fetch category data failed, Invalid category id",
    });
 

--- use return with the response , and next()
return res.status(200).json({
        success: true,
        message: "Category fetched successfully",
        data: category,
      });

return next()

--- always set defaults 
    const pageIndex = parseInt(req.query.page) || 1;
    const limitCount = parseInt(req.query.limit) || constants.DEFAULT_PAGE_SIZE;

--- avoid send status 200
    res.status(200).json({...});

--- don't return json property as null, don't set property
--- don't return property in json object as null		what happend if frontend access it?

--- arrange requires at the head of the file

--- don't set req.body value to mongodb model

--- make code under source directory.

--- create object in constants that represents status codes 
--- use constants for ( Collection names, Status codes, Messages, Enums , ) 

--- create lib folder which contains each entity functions  
--- make lib folder for Entities utils.

--- /deliveries/:id/confirm-pickup	 how to write 2 words or more in url.

--- make readonly fields immutable, can't edit it later.

--- return next(), and return response.

--- use transactions when you have more than one operation that need to be executed toghter.

--- use lean to minimize response size, if no operations will be done on this object

--- make validation in model level & endpoint level

--- don't declare using var ,  but use let or const 

--- check objectid is valid

--- make the variable name the same as the export name.

--- consider using custom queries in mongodb schema like  `findByEmail`

--- use trim, escape, sanitize to to santize each input value

--- Limit the size of the body:	 app.use(express.json({ limit: '20kb' }));

--- regularly remove unUsed imports 		how to automatically find it. 
	Ask chatgpt:  can you tell how can i remove not used imports in nodejs, expressjs projects in vscode (simple way , applies to all files)?

--- see express validator docs for more built in checks 

--- see mongoose models docs  for more shema validation

--- import what you want only 
module.exports.StatusCodes = StatusCodes;			// avoid this set the object direct to the export
const { StatusCodes } = require("../utils/constants");




======= Discuss
--- Create middleware to validate param :id in all routes that accepts it.
--- make function to check is valid object id , and put it in commonutils --- try to make general validation using middlewares	???

--- in middleware we can set `req` or `res.locals`	, --- move check exist to service.
--- forigen key fields should be indexes
--- don't return property in json object as null		what happend if frontend access it?
--- app.use('/users', usersRouters)			// put the base route url when register a route
--- make api-key variable for each user.	(common contract between client and backend)			not possible for login


--- seqalize
--- aggregate vs populate
--- compare plain text password with hased password
--- Shared Module
--- Should we store message , or should it be hard coded ?
--- set naming convensions	


============= 

