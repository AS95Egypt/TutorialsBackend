https://dev.to/encore/how-to-make-your-expressjs-apis-9x-faster-with-encorets-1ke2?ref=dailydev

https://github.com/goldbergyoni/nodebestpractices

https://r.bluethl.net/how-to-design-better-apis

use lucid for drawing diagrams 

lucid.app

- use eslint for formatting and code standard
	https://chatgpt.com/c/66de9f42-cb24-8003-958d-29d59bed3b34


=========

==== Naming convensions



==== 
- Use descriptive variable names.
- use await
- list all functions names in file header
- put docs, credentials, rules, ... in project's github repo.
- don't use database models inside services only in repo.
- Break up long blocks of code into smaller.
- don't nest conditions , but use returns.
- use return with the response , and next()
- use version in API
- arrange requires 	// packages 	// app		// models	// constants	  // utils
- write organized comments with steps in business 1)..., 2)..., 3)...
- always set defaults 		    const pageIndex = parseInt(req.query.page) || 1;
- try to make forigen key fields indexes.
- Use a linter	ex: ESlint with pritter
- update dependancies regularly
- make code under src directory.
- use constants for ( Collection names, Status codes, Messages, Enums , routes) 
- make readonly fields immutable, can't edit it later.
- use transactions when you have more than one operation that need to be executed togther.
- use lean to minimize response size
- make validation in model level (model.js) & endpoint level (validator.js) (database operations in validator)
- import what you want only 	const { StatusCodes } = require("../utils/constants");
- don't declare using var ,  but use let or const 
- *** use trim, escape, sanitize to to santize each input value
- Limit the size of the body:	 app.use(express.json({ limit: '20kb' }));
- use CDN or cloudinary to upload images to upload videos or images, reduce image size and quality.
- regularly remove unUsed imports	- how to remove them in javascript, in typescript it shows warning.
- replace packages with the new features in nodejs and expressjs 
- don't set req.body value to mongodb model (to avoid field in body not in schema to be added in database)
- send right http method & meaningful messages.
- don't do 	checkId.custom(...)	// express validator check.custom
- use .bail()
- handle non-exist routes
- Write integration tests


- apply SOLID
- make code resuable

--- see express validator docs for more built in checks 
	https://express-validator.github.io/docs/api/validation-chain/

--- see mongoose models docs  for more shema validation
	https://mongoosejs.com/docs/validation.html

