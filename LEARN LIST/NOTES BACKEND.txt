--- Study Encore Backend Framework 
 - article
	https://dev.to/encore/encorets-9x-faster-than-expressjs-3x-faster-than-bun-zod-4boe?ref=dailydev
 - official docs
	https://encore.dev/docs/quick-start

 
--- Nestjs can better in building enterprise and large applications, it provides modularity and rich features comparing to express which requires
packages , express can be faster and better for small applications

--- install @types/... packages as dev dependancies 		--save-dev

--- consider using validation packages like (ajv, zod, typebox) , compare between them.

--- use eslint for formatting and code standard
	https://chatgpt.com/c/66de9f42-cb24-8003-958d-29d59bed3b34

--- continously update nodejs version to obtain most recent features and security patches.

--- Nodejs Worker threads allows to offload complex calculations to separate threads, 
	This frees up the main thread for handling user requests.

--- encryption supported in nodejs instead of using bcrypt package
	https://blog.platformatic.dev/nodejs-is-here-to-stay?ref=dailydev#heading-webcrypto

--- use nodejs `fetch` instead of external libs like axios.

--- use nodejs parseArgs instead of inqurier package	import { parseArgs } from 'node:util';

--- use nodejs test runner instead of jest
	https://blog.platformatic.dev/nodejs-is-here-to-stay?ref=dailydev#heading-test-runner

--- Common Resources to Free or Disconnect

- Database Connections:
	MongoDB: Disconnect the MongoDB client.
	MySQL/PostgreSQL: Close the database connections or pool.
	Redis: Quit the Redis client.

- File Descriptors: Close any open file descriptors, such as files being read or written.

- Network Sockets: Close any open network sockets or server connections.

- External APIs: Ensure that any long-running connections to external APIs are properly closed.

- Message Queues: Disconnect from message queues like RabbitMQ, Kafka, or other similar services.

- Timers: Clear any active setTimeout or setInterval timers to prevent them from running unexpectedly.

- apply business in the endpoint and in the schema model, (collect list of fields validation) 

- study express-validator built in validation, 	and collect situations when to apply them (make solid validation & sa).

- if you multiple services which consume similar utilities you should start managing your dependancies.
	- wrap this code in 3rd party private package , this makes it easily replacable in the future.
	https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/projectstructre/wraputilities.md

--- Use enviroment aware, secure and hierarchical config
	- you should group related configs togther in config json file.
	- to store senstive configs like (db pass) , some packages encrypt files, 
	   specify the actual value during deployment via environment variables.
	- inject configuration values via cmd (vargs) or sync configs via a centralized cache like Redis 
	   so multiple servers will use the same configuration data.
	- the application should fail as fast as possible and provide the immediate feedback 
		if the required environment variables are not present at start-up.
   - example of config package: https://www.npmjs.com/package/convict
				https://www.npmjs.com/package/config

---  how to choose the right framework? 
- Express: 
   - Pros:
	- has the biggest popularity and eco system
   - Cons: 
	- Covers a small subset of a typical application needs, means leave some app concerns uncovered.
   - Use when:
	- having an experienced architect.
	- also Koa is also a solid option with a more modern API than express.

- Fasitfy:  
   - Pros:
	- simple and lean; mostly based on Node.js/JavaScript standards
	- relatively shallow learning curve.
	- with its official plugins cover many application concerns though not as rich as Nest.js.
   - Cons:
	- younger and has smaller eco system.	
   - Use when: 
	- you have a reasonably sized components/microservices (not a huge monolith)
	- have solid js & nodejs knowledge
- Nest: 
   - Pros:
	- its a rich framework with alot of built in features, covers many application concern including message queues, scheduled jobs and more
	- OOP-style 
	- awesome docs; well-maintained.
   - Cons:
	- High-level abstractions that cloud built-in Node.js conventions.
	- push teams to increased complexity due to sophisticated patterns.
	- Steeper learning curve due to unique narratives (e.g., interceptors, guards, modules, and more)
   - Use when:
	- It's desirable to design and code in OOP style.
	- when the time to the first delivery is a critical factor.
	- for large size app that can't be broken down (i.e. monolith) to autonomous component; 
	- for teams who are highly experienced with java/spring/angular

--- use typescript sparingly and thoughtfully (carfully)
	- using typescript advanced features may inadvertently (بشكل غير مقصود) complicate projects.
	- TypeScript can reduce bugs, but it will not capture all issues.
	- so making complementary practices like linting and testing essential.

--- avoid using nested callbacks
	- because of its poor scalability, complicated code structure.
	- use promise libs and try-catch error handling style for better code clarity and flow.
	- callbacks is about writing code without a stack, its like driving a car without a brake pedal.
	- callbacks might endup completely useless if the error happens on a different stack.
	- Using promises results in more compact code and centralized error handling through a single .catch() method.
	- promises prevent a loss of control flow.

--- you don't have to make a promise from fs package , because it now supports promises
import {readFile} from 'fs';
import {readFile} from 'fs/promises';	// use this
readFile('path').then(data).catch()		or await for it

--- use glob to match files using regular expressions
import {glob} from 'fs/promises';
const files = glob("**/*.test.ts");// accepts pattern
console.log(await files.next());

--- Use only the built-in Error object
	- Using Node.js built-in Error object helps to keep uniformity within your code and with 3rd party libraries
	   and preserves significant information like the StackTrace.
	- you can extend Error class to add more info like error name or http code but be careful don't overdo it.
	- it's generally a good idea to extend the built-in Error object only once with an AppError for all the application level errors.
	   No need to extend the Error object multiple times, just pass data to differentiate between different types of errors.
	- don't throw a string , because lacks any stack trace information and other important Erorr properties
		throw ('How can I add new product when no value provided?');

- extend native javascript Error class, see typescript code

// centralized error object that derives from Node’s Error
function AppError(name, httpCode, description, isOperational) {
    Error.call(this);
    Error.captureStackTrace(this);
    this.name = name;
    //...other properties assigned here
};

AppError.prototype = Object.create(Error.prototype);
AppError.prototype.constructor = AppError;

module.exports.AppError = AppError;

// client throwing an exception
if(user == null)
    throw new AppError(commonErrors.resourceNotFound, commonHTTPErrors.notFound, 'further explanation', true)

--- Distinguish catastrophic errors from operational errors
	- Operational errors (e.g. API received an invalid input) refer to known cases where the error impact 
	  is fully understood and can be handled thoughtfully, usually logging the error is enough. 
	- catastrophic error (also known as programmer errors) refers to unusual code failures 
	    that dictate to gracefully restart the application
	- for programmer's errors application might be in an inconsistent state that requires application restart.
	- Distinguishing the following two error types will minimize your app downtime and helps avoid crazy bugs.
	- Programmer errors are bugs in the program.
	   option1: The best way to recover from programmer errors is to crash immediately and restart using restart like pm2.
	   option2: programmer error might leave the app in an undefined brittle state, 
			but it is not reasonable to abruptly shut those (open connections) down because an error was triggered by someone else.
			The better approach is to send an error response and let others finish in normal time.
	   option3: a balanced approach between the two.

--- Handle errors centrally, not within a middleware
	- Error handling logic such as logging, deciding whether to crash and monitoring metrics 
	   should be encapsulated in a dedicated and centralized object that all entry-points 
	   (e.g. APIs, cron jobs, scheduled jobs) call when an error comes in.
	- Not handling errors within a single place will lead to code duplication and probably to improperly handled errors.
	- errors thrown within (web requests, startup, scheduled jobs) might get handeled differently, 
		this will lead to mismanagement of errors.
	- This single error handler object is responsible for making the error visible 
		- writing to a well-formatted logger 		- decide to crash and restart or send response
		- firing metrics using some monitoring product (sentry, Prometheus, cloud watch, data dog)
	- you should not provide error handling in middleware, because you will not be able to use this error 
	   handler in different scenarios like (scheduled jobs, message queue subscribers, and uncaught exceptions)
	- the error middleware should only catch errors and forward them to the handler.	
    - see code at: https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/errorhandling/centralizedhandling.md 

--- Document API errors using OpenAPI
	- Let your API callers know which errors might come in return so they can handle these thoughtfully without crashing
		- means if errors are expected then API caller can setup the appropiate UX to tell the user.
		- the caller may then catch an error and tactfully handle it.
	- this can be done in RestAPIs using documentation tools like (OpenAPI(swagger), Postman)
	- An API client might decide to crash and restart only because it received back an error it couldn’t understand.
	- Note: the caller of your API might be you (very typical in a microservice environment)

--- Exit the process gracefully when a stranger comes to town
	- error handler object is responsible for deciding how to proceed when an error is thrown.
	   - if error is operational then writing to log file might be enough.
	- for un familiar errors things might get hairy, 
	   these errors might leave the app in unstable state (behave unexepctedly and cause all requests to fail) which requires restart.
      - see code at https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/errorhandling/shuttingtheprocess.md
	- in this code if error.isOperational === false then process.exit(1) and pm2 will restart app again.

--- Use a mature logger to increase errors visibility
	- A robust logging tools like Pino or Winston increases the errors visibility 
 	  using features like log-levels, pretty print coloring and more.
	- logging tools allow attaching custom useful properties to log entries with minimized serialization performance penalty. 
	- Developers should write logs to stdout and let the infrastructure pipe the stream to the appropriate log aggregator
	- Skimming through console.logs or manually through messy text file without querying tools 
	   or a decent log viewer might keep you busy at work until late.
	- Logging recommendations:
	  - Log frequently using different levels (debug, info, error).
	  - log in json format
	  - Timestamp each log line
	  - Logging format should be easily digestible by humans as well as machines.
	  - Allows for multiple configurable destination streams(console, file, elasticsearch)
	  - Monitor and filter logs with a log querying API (built-in to many loggers) or log viewer software. 
	  - Expose and curate log statements with operational intelligence tools such as Splunk.
	The phrase means to collect and organize log data generated by systems or applications 
	in order to analyze it using operational intelligence tools like Splunk. 
	This helps in monitoring performance, identifying issues, and gaining insights into the system's operation.
--- Test error flows using your favorite test framework
	- Ensure that your code not only satisfies positive scenarios but also handles and returns the right errors.
	    Whether its (professional automated QA or plain manual developer testing)
	- ensure that the error handler treat uncaught exceptions properly.
	- you can’t rely on your code to return the right errors without automatic or manual testing.
	- Without meaningful errors – there’s no error handling.
	- Good testing code coverage demands to test exceptional paths.
     - See testing code in this example.

--- Discover errors and downtime using APM products
	- Monitoring and performance products (a.k.a APM) proactively gauge تقيس your codebase or API 
	   so they can automagically highlight errors, crashes, and slow parts that you were missing.
	- Exception != Error. because they are handled by applications
	- but application errors might come in the form of slow code paths, 
	   API downtime, lack of computational resources and more. 
	- APM products come in handy as they allow to detect a wide variety of ‘burried’ 
	   issues proactively with a minimal setup. 
	- common features of APM products are for example alerting when the HTTP API returns errors, 
	   detect when the API response time drops below some threshold, detection of ‘code smells’,
	    monitor server resources, operational intelligence dashboard with IT metrics. 
	- APM products constitute 3 major segments:
		1- Website or API monitoring: external services that constantly monitor uptime and performance via HTTP requests.
		2- Code instrumentation 
		3- Operational intelligence dashboard 
  - find tools here https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/errorhandling/apmproducts.md	

--- Catch unhandled promise rejections
	- subscribe to process.uncaughtException & process.unhandledRejection to catch most of the errors.
	- promises exceptions are not caught using `uncaughtException` event handler, but using `unhandledRejection`
	- never forget adding .catch clauses within each promise chain call and redirect to a centralized error handler. 
	- but relying on developer’s discipline is somewhat fragile, so you should subscribe to `unhandledRejection`. 
	- The problem with being human is that if you can make a mistake, at some point you will. 
	- we should design things in such a way that mistakes hurt as little as possible.
	- Note: using AysncHandler package solve this issue, but its recommended to subscribe to those events
process.on('unhandledRejection', (reason, p) => {
  throw reason;
});
process.on('uncaughtException', (error) => {
  errorManagement.handler.handleError(error);
  if (!errorManagement.handler.isTrustedError(error))
    process.exit(1);
});

--- Fail fast, validate arguments using a dedicated library
	- Assert API input to avoid nasty bugs that are much harder to track later.
	- use modern validation lib to validate API input.
	- example: when you expect a numeric value `discount` and user forgets to pass it, and in your code 
		you check if discount !== 0 , the bug is the code will pass and user will enjoy discount.
	- checking arguments and failing fast is important to avoid hidden bugs.
	- Making the software behave in a predictable manner despite unexpected inputs or user actions.

--- Always await promises before returning to avoid a partial stacktrace
	- don't forget to write await before promises, to benefit full error stacktrace.
	- If a function returns a promise, that function must be declared as async function 
	   and explicitly await the promise before returning it.
	- The function that returns a promise without awaiting won't appear in the stacktrace.
	   this will lead to errors and complicates understanding.
	- When you use an async callback in a place where a sync callback is expected, it can "return" 
		before the async operation is complete. This can lead to unexpected behavior.
	- to fix this issue
		// 👍 now the line below is in the stacktrace
		Promise.all(userIds.map(async id => await getUser(id))).catch(console.log)
	- resolving promises before returning them is the best practice for Node.js

--- Subscribe to event emitters and streams 'error' event
	- try-catch clause won't get errors that originate from Event Emitters and streams like it does with typical functions.
	- Instead of try-catch, subscribe to an event emitter's 'error' event so your code can handle the error in context.
	- for Event emitter there are no 'error' event and all errors end in the process.on('error) global event. 
	- Event emitters are used in functionalities like DB or messages queues 
	- When they throw an error, at best the process will crash due to unhandled exception.
	   Even worst, it will stay alive as a zombie while a key functionality is turned off

===== 3. Code Patterns And Style Practices
	
--- Use ESLint
	- ESLint is the de-facto standard for checking possible code errors and automatically fixing code style.
	- not only to identify nitty-gritty spacing issues but also to detect serious code anti-patterns.
	   like: throwing errors without classification.
	- tools like prettier are more powerful in formatting the fix and work in conjunction with ESLint.
	- see more information here
	  https://stackoverflow.com/questions/44690308/whats-the-difference-between-prettier-eslint-eslint-plugin-prettier-and-eslint
	- ESLint is deprecating formatting rules and recommend you use a source code formatter instead (prettier).
	- it's the recommended practice to let Prettier handle formatting and ESLint for non-formatting issues.
   - see this explaination
	https://claude.ai/chat/d72d30f8-a510-4b35-a4a3-accb0d118b92

--- Use Node.js eslint extension plugins
	- add Node.js specific plugins like 
	  - eslint-plugin-node, 
	  - eslint-plugin-mocha 
	  - eslint-plugin-node-security
	  - eslint-plugin-require
	  - eslint-plugin-jest 
	- Many faulty Node.js code patterns might escape under the radar.
	- NOTE: developers might require(variableAsPath) files with a variable given as a path 
		which allows attackers to execute any JS script. 

--- Start a Codeblock's Curly Braces on the Same Line
function someFunction() {
  // code block
}

example: 
return
  { /* <--- curly brace on new line */
    javascript: "fantastic"
  };					// undefined

return { /* <---- curly brace on same line */
   javascript: "fantastic"
};					// fantastic

	- this is because javascript adds semicolon automatically.
	- adding brakets in new line might lead to unexpected results.

--- Separate your statements properly
	- knowing the common pitfalls of improper linebreaks or automatic semicolon insertion, 
	   will help you to eliminate regular syntax errors.
	- use Eslint and prettier to solve these issues.
	- JavaScript's interpreter automatically adds a semicolon at the end of a statement if there isn't one,
  	  or considers a statement as not ended where it should.
	  this might lead to some undesired results. 
	- put a semicolon before the immediate invoked function
const count = 2 // it tries to run 2(), but 2 is not a function, it does'nt add semicolon implicitly
(function doSomething() {
  // do something amazing
}())
	- writing semicolon at the end of line is mandatory, use eslint to enforce this. 

--- Name your functions
	- Name all functions, including closures and callbacks. Avoid anonymous functions. 
	- This is especially useful when profiling a node app. 
	- Naming all functions will allow you to easily understand what you're looking at when checking a memory snapshot
	- Debugging production issues using a core dump (memory snapshot) might become challenging 
	   as you notice significant memory consumption from anonymous functions.

--- Use naming conventions for variables, constants, functions and classes
     - Naming style
	- Use lowerCamelCase when naming constants (not global), variables and functions.
	- UpperCamelCase (capital first letter as well) when naming classes.
	- UPPER_SNAKE_CASE when naming global or static variables. 

      - This will help you to easily distinguish between plain variables, functions, classes 
	  that require instantiation and variables declared at global module scope.  

      - Use descriptive names, but try to keep them short.
      - Avoid define class in javascript with function keyword, because in this case you will be able to 
	call class (function) without creating instance, so after js added class syntax this become not allowed.

--- Prefer const over let. Ditch the var
	- Using const means that once a variable is assigned, it cannot be reassigned. 
	- Using const makes the code clearer and will help you not to be tempted to use the same variable for different uses.
	- use `let` if variable needs to be reassigned ex: in for loop.
	- variable declared using let is only available in the scope of definition.
	- Debugging becomes way more cumbersome (معقد) when following a variable that frequently changes.
	- var is function scoped, not block-scoped , and you should not use it in ES6.

--- Require modules first, not inside functions
	- Require modules at the beginning of each file, before and outside of any functions.
	- will practice will help you to easily tell the dependancies from the top the file,
	  and avoid some potential problems.
	- Requires are run synchronously by Node.js and this can delay the function 
	   and block other request from begin handled at a more critical time.
	- if a module is required at the top of a file, then it will be more likely to notice errors thrown
	   by this module (when start script) than when run from a function (notice when call function).

--- Set an explicit entry point to a module/folder
	- When developing a module/library, set an explicit root file that exports the public and interesting code.
	- Discourage the client code from importing deep files and becoming familiar with the internal structure. 
// wrong
const SMSWithMedia = require("./SMSProvider/providers/media/media-provider.js");
// correct
const { SMSWithMedia } = require("./SMSProvider");	
	- Having an explicit root file acts like a public 'interface' that encapsulates the internals.
	- this facilitates future changes without breaking the contract.
	- this can be done with an index.js file at the folder's root , which re-exports all the public functionality.
	- having package.json at the root will refer to entry file, 
	   otherwise you should put index.js at root which exports puplic functionalities. 

---  Use the === operator
	- There is no type conversion in === , so === is more strict.
	   and both variables must be of the same type to be equal.
"" == "0"; // false
0 == ""; // true
0 == "0"; // true

false == "false"; // false
false == "0"; // true

false == undefined; // false
false == null; // false
null == undefined; // true

" \t\r\n " == 0; // true

--- Use Async Await, avoid callbacks
	- Async-await is the simplest way to express an asynchronous flow 
	    as it makes asynchronous code look synchronous.



--- 