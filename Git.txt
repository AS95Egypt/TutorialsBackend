git add .
git commit -m "Put your message here"
git push


=========== Github account
AS95Egypt
password: 

=========== Tutorials
https://dev.to/burakboduroglu/a-z-git-cheat-sheet-14pm

--- Git & Github
	https://www.youtube.com/watch?v=xuB1Id2Wxak&list=PL9ooVrP1hQOGwtQOt8ZBlVjFlI-9Vr5hx&pp=iAQB


https://pinjarirehan.medium.com/essential-git-commands-for-beginners-4b16ca87df8a?source=user_profile---------8----------------------------

--- شخبط  وانت مطمن
	https://www.youtube.com/watch?v=Q6G-J54vgKc

- https://www.freecodecamp.org/news/learn-git-in-detail-to-manage-your-code/
  https://www.freecodecamp.org/news/guide-to-git-github-for-beginners-and-experienced-devs/
  https://www.freecodecamp.org/news/github-foundations-certified-exam-prep-guide/
  https://pinjarirehan.medium.com/essential-git-commands-for-beginners-4b16ca87df8a?source=user_profile---------9----------------------------
  https://pinjarirehan.medium.com/boost-your-code-quality-learn-git-github-like-a-pro-ff17073c5cfd?source=user_profile---------232----------------------------

=========== Code Review
1- All changes require at least one approval before getting committed to the codebase.

2- Make pull requests small and digestible so code reviews can be done quickly. 
	There shouldn’t be too many conceptual changes in a single PR.

3- PRs should be reviewed within 4 hours (at least one reviewer should respond). 
	If it’s been more than 4 hours, the engineer can add a comment to their 
	pull request that will send a notification to all reviewers requesting feedback.

4- Add context to the PR so a reviewer can easily understand what the PR is changing and why. 
	If there are any changes that affect the UI, there should be screenshots of the UI that show the change.

- Avoid redundancy in your comments; don’t write what you do, write why you do it.

=========== learn how to integrate Github copilot in vscode
	https://www.freecodecamp.org/news/developer-productivity-with-github-copilot/

- install extension 
- vscode will login to your github account, then authorize vscode,
- add copilot to your github account ,and add payment method.

- write in plain english , what you want to do in comments.
- you can use github copilot for 
   - Documenting
   - Fixing bugs
   - Explain code
===========  EL Zero
	https://www.youtube.com/watch?v=ACOiGZoqC8w&list=PLDoPjvoNmBAw4eOj58MZPakHjaO3frVMF

===========  Learn Git in one hour
https://www.youtube.com/watch?v=8JJ101D3knE

- git is a version control system.
- version control system  records the changes made to our code in a special database called repository.
- we can look at project history and see who has made what changes when and why.
- we can easily revert our project back to an eariler state if some thing wrong happen.
- git is a distributed version control system.
- git is (free, fast, open source, scalable, cheap & easy branching and merging)

-- ways to use git
	- cmd	(can sometimes be easiets and fastest)
	- code editors & IDEs	ex: source control tab in vscode (provides essential commands)
	- GUIs	ex: sourcetree, gitkraken

-- why use cmd ? 
	- gui tools have limitions (because they provide widely used commands)
	- gui tools might not be available all the time, example: on servers that don't allow gui tool to be installed

- download and install git

- git has 4 stages ( 1- working directory 	2- staging area		3- commit (local repo)  	4- Remote repo)

- how to start a new project , how to link this local project with a remote repo
	- in a new folder write 	git init
	- add, commit and manipulate files in working directory
	- create a new repo on github then you will have a link
	- use this url to link your project with remote repo
		git remote add origin git-url.git
	- push your code to remote repo
		git push --set-upstream origin main
		git push --set-upstream origin master

- in order to share project between team members or edit it in another device
		git close git-url.git

- get the latest changes by your team 
		git fetch			// these changes will be only in commit stage
		git merge			// to merge these changes in working directory

	OR
		git pull			to do both steps at once	

======= branches
- its allows multiple versions of repo to exist at the same time.
- use different branch to develop a new feature away from team's main branch where it has a separate development and testing.

- create a new branch
	git branch newBranchName

- list all branches
	git branch	

- to switch to new branch
	git checkout newBranch

- after adding a new branch and switching to it push changes to this branch on remote repo
	git push --set-upstream origin newBranch			// you to specify branch name

- merge features from newBranch to main branch
	git merge origin/newBranch		??? where we pass main branch or is it main by default

- these changes will be added to main branch on remote repo only when push them.

--- how to solve conflicts and merge changes from differnet branches with alot of modifications?
	what is squash merge
	or
	cherry-pick which moves commits between branches

=======
-- configuring git
- there is 3 levels of configuration
  1- System
  2- Global
  3- Local
- you have to configure  user (name, email, IDE, end of line)
- how to create git.config file ?
- configuration can be adjusted to a specific operating system.

- HOW TO CONFIGURE VSCODE TO BE DEFAULT EDITOR ? 

- staging area is the index
- commits are snapshots that are saved to the repo. 
- we add modified files to the staging area, in order to review code and if every thing is good we commit to the repo.
- the benefit of the staging area is that we select the files that will be in the commit (snapshot)
- commit messages are very important in order to have a useful history.
- each commit cleary explains (through meaningful messages) the state of project at this time
- commited files are still in the staging area, 
	but when make a change to any of these files new version replaces the old version in the staging area
- you should use git command to remove a file from a project in order to remove from staging area too
- each commit contains information like (ID, message, date, auther, complete snap shot of the project)
- Note: when file1 is in the staging area and you make changes again to it, then you should add it again to the
	staging area , because the version in the staging area is the older one.
- commits should not be too small or too big.
	don't commit for each file you edit, and dont' commit after 3 days for example

-- git help
- example when you want to get help for git config 
	git config --help

- initialize a new git repo
	git init

- cancel initialization (remove .git folder)
	rm -rf .git

- untracked files means newely added files (not in remote).

-- add file or all files to staging
	git add file1.js
	git add file1.js file2.js		// add multiple files
	git add *.js				// add files with pattern
	git add . 

-- view repo info like branch, un tracked files , changed files, staged files
	git status

- to view short info about repo (only modified and added files)
	git status -s

-- un stage file (remove from index)
	git restore --staged package.json
	git rm --cached app.js
	git rm --cached -r bin/				// remove folder recusively from staging area

	git restore --staged app.js package.json .env		// unstage multiple files

- remove file from working directory
	git rm app.js				// file should not be staged
   - you should commit and push to delete also on github 

- list files in staging area
	git ls-files

- push to specific branch
	git push origin master

- commit the changes and open editor to enter commit message
	git commit

- commit with message
	git commit -m "message"

- commit directly and skip the staging area
	git commit -a -m "message"	or  	git commit -am "message"
  Note: you should stage to review the changes.

- rename or move a file, changes applied to both working directory (local) & staging area
- you should git command for delete, rename or move instead of os commands
 git mv file1.js file2.js 
 git mv src/global/prepared_data/versions/version_1/script_1.js src/global/prepared_data/versions/version_1/script_2.js

- view the history of commits with messages , user and date
	git log
	git log --oneline	// get summary log
	git log --reverse	// get log from oldest to newest

- in order to exit prompt 
	:qa	or 	:q

======== discarding local changes
- revert the changes in a file  (copies messages.js from index to working directory)
	git restore src/global/app_constants/messages.js
	git restore file1 file2 	revert multiple files 
	git restore .			revert all local changes (except un tracked files)
	git clean -fd	or -f -d	remove all untracked files

======== restore an ealier version a file 
	git restore --source=HEAD src/app_modules/common/entities/app_settings/model.js
	git restore --source=HEAD~2 src/app_modules/common/entities/app_settings/model.js
	git restore --source=57fabf8 src/app_modules/common/entities/app_settings/model.js

========= Ingore files 
- we don't want to include log files or binary files which is generated after compiling code like (exe, node_modules).
- adding this files will increase the size of our repo without adding any value, beside each developer can have
  his own log file or connection file

- learn how to create txt file and append text to it using cmd.
- create .gitignore file and put files and folders you don't want to include in repo, can accept patterns
logs/		// folder
node_modules	// folder
connection.ini  // file
*.logs
*.exe

- gitignore file is added to repo.
- including a commited file or staged file in .gitignore will not ignore this file if any changes happen to it.
- you have to remove file or folder from staging area in order to ignore it
- there are logs for each language which ignore its related files extensions.	!!! SEARCH FOR NODEJS

========= Short status
- if you have a file in staging area, then you modified this file again then you have to add it again to staging area
	git stats -s will show  MM file1.js	// left M is green means staged , right M is red means modified but this modifications not staged.

========= view changes (staged and unstaged)
- (based on Option you specify) it compares changes between modified file in working directory and commited version of this file.
- view code changes in unstaged files
	git diff			// its better to view the changes in editor like vscode

- view code changes in staged files
	git diff --staged
	git diff --cached

========= Visual diff tools
- see at min:50 how to configure git to use vscode as diff tool.

- in our case we can see diff in staged files by going to git tab in vscode
========= viewing a commit
git show d49		you can type only a few characters of commit id as long as its not shared by another id

- to show a given commit with code changes
	git show 6fcc92b
	git show HEAD		// to show the latest commit 
	git show HEAD~1		// to show commit before head
	git show HEAD~4		// to show the 4th commit before head
	git show HEAD:file1.js	// to show file1.js version stored in head commit
 	git show 6fcc92b:file1.js	// to show file1.js version stored in this commit

!!! how to show changes in code editor

- to show all changes in a commit
	git ls-tree HEAD~1			// it will list all files (trees) changed in this commit, with id for each one

- to list a tree shown in ls-tree
	git show fileID

- git show can view (commits ,blobs, trees, tags)

========= Browsing History

- get commits that touched trx_context
	git log src/global/database/trx_context.js

- get commits by auther
	 git log --author="Ahmed Salah Salem"

- get commits in range 
	git log 31ffd51..ab6a204	// older..newer

---

===========

- git checkout			to show current branch
	
- git checkout branch-nanme	to switch to another branch

- git checkout commitId		to retreive this snapshot

- git status 			also to show current branch

	


